use sakila;
-- 1.Rank the customers based on the total amount they've spent on rental
SELECT c.customer_id, concat(c.first_name," ", c.last_name) as name, SUM(p.amount) AS total_amount, r.rental_id, RANK() OVER (ORDER BY SUM(p.amount) desc) AS ranking
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
JOIN rental r ON p.rental_id = r.rental_id
GROUP BY c.customer_id, c.first_name, c.last_name, r.rental_id
ORDER BY total_amount DESC;
-- 2.Calculate the cumulative revenue generated by each film over time.
SELECT 
    f.title, f.last_update, SUM(p.amount) AS total_rev
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r ON i.inventory_id = r.inventory_id
        JOIN
    payment p ON r.customer_id = p.customer_id
GROUP BY f.title , last_update
ORDER BY total_rev DESC;
-- 3.Determine the average rental duration for each film, considering films with similar lengths.
SELECT 
    title, AVG(rental_duration) AS avg_r, length
FROM
    film
GROUP BY title , length
ORDER BY length, avg_r desc;

-- 4.Identify the top 3 films in each category based on their rental counts.*
SELECT 
    c.name as catory, f.title, COUNT(rental_id) AS rental_count
FROM
    category c
        JOIN
    film_category fc ON c.category_id = fc.category_id
        JOIN
    film f ON fc.film_id = f.film_id
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY catory , f.title
ORDER BY rental_count DESC
LIMIT 3;

-- 5.Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers
SELECT DISTINCT
    (CONCAT(c.first_name, ' ', c.last_name)) AS name,
    COUNT(rental_id) - rental_id AS diff_rental , avg(rental_id)- count(rental_id) as average
FROM
    customer c
        JOIN
    payment p ON c.customer_id = p.customer_id
GROUP BY c.first_name , c.last_name , rental_id;
-- 6.Find the monthly revenue trend for the entire rental store over time
select * from store s
join inventory i on s.store_id = i.store_id
join rental r on i.inventory_id= r.inventory_id;

SELECT 
    DATE_FORMAT(payment_date, '%Y-%m') AS Month,
    SUM(amount) AS MonthlyRevenue
FROM payment
GROUP BY Month
ORDER BY Month;

-- 7.Identify the customers whose total spending on rentals falls within the top 20% of all customers.
SELECT 
    c.first_name, c.last_name, SUM(amount) as rental
FROM
    customer c
        JOIN
    payment p ON c.customer_id = p.customer_id
group by c.first_name, c.last_name
having rental > 20/100;

-- 8.Calculate the running total of rentals per category, ordered by rental count.
SELECT 
    count(rental_id) as rental_count, name as category
FROM
    rental r
        JOIN
    inventory i ON r.inventory_id = i.inventory_id
        JOIN
    film_category f ON i.film_id = f.film_id
        JOIN
    category c ON f.category_id = c.category_id
    group by category
    order by rental_count;
    
  --  9. **Find the films that have been rented less than the average rental count for their respective categories.
  select title,  avg(rental_id),rental_id  from rental r
  join inventory i on r.inventory_id = i.inventory_id
  join film f on i.film_id = f.film_id
  group by title,rental_id
  having  avg(rental_id)> (select count(rental_id) from rental);
  
  -- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.
  select (amount) , payment_date, last_update from payment
  order by amount desc
  limit 5
  
  
  
  
  
